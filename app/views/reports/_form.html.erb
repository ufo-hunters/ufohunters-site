<%= cloudinary_js_config %>
<% #=Cloudinary::Api.delete_all_resources %>
<script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>
<link rel="stylesheet" href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" />
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.css' type='text/css' />

<script>
   $(document).ready(function(){
        $("#new_report").validate({
       });
   });   
</script>
<div class="row">
   <div class="span12">
      <h3>New report</h3>
   </div>
</div>
<%= form_for(@report) do |f| %>
<div>
   <div class="span12">
      <% if @report.errors.any? %>
      <div id="error_explanation">
         <h2><%= pluralize(@report.errors.count, "error") %> prohibited this report from being saved:</h2>
         <ul>
            <% @report.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
            <% end %>
         </ul>
      </div>
      <% end %>
   </div>
</div>
<script>
   $(function() {
     $( "#report_sighted_at" ).datepicker({dateFormat: "mm/dd/yy"});
   });
   cont = 0;
   function addlink() {
           cont = cont + 1;
            $(".fieldlinks").append("<input type='text' size='30' class='fieldufo' name='report[links][]' id='report_links_" + cont + "'/>");
   }
</script>
<div class="row">
   <div class="span4">
      <label for="sighted_at">Sighted on <span class="divrojo">*</span></label>
      <%
         sighted_at_value = nil
         unless params[:report].blank?
           sighted_at_value = params[:report]["sighted_at"]
         end
         %>
      <%= f.text_field :sighted_at, :size => 12, :class => 'required fieldufo', :value => sighted_at_value %>
   </div>
   <%
      reported_at_value = Time.new.strftime('%m/%d/%Y').to_s
      %>
   <%= f.hidden_field :reported_at, :value => reported_at_value %>
   <div class="span4">
      <label for="report_shape">Shape <span class="divrojo">*</span></label>
      <%= f.text_field :shape, :size => 12, :class => 'required fieldufo' %>
   </div>
   <div class="span4">
      <label for="report_duration">Duration <span class="divrojo">*</span></label>
      <%= f.text_field :duration, :size => 12, :class => 'required fieldufo' %>
   </div>
</div>
<div class="row">
   <div class="span4">
      <label for="report_email" class="report_location">Contact email (your email address<br/> will never be published or shared)</label>
      <%= f.text_field :email, :class => 'fieldufo' %>
   </div>
   <div class="span4">
      <label for="report_email_confirmation" class="report_location">Contact email confirmation<br/> (repeat your email to make sure it is OK)</label>
      <%= f.text_field :email_confirmation, :class => 'fieldufo' %>
   </div>
   <div class="span4">
      <label for="report_links" class="report_location">Links (videos, images, articles...)</label>
      <input id="report_links_0" class="fieldufo" type="text" size="30" name="report[links][]">
      <div class="fieldlinks"></div>
      <a href="javascript:addlink();">(Add more links)</a>
   </div>
</div>
<div class="row">
   <div class="span11 well">
      <label for="report_duration">
         <h4>Add your photos or pictures to our site</h4>
      </label>
      <div class="form_controls">
         <div class="upload_button_holder">
            <%
               time = Time.new
               datetimeNow = "reported_date_" + time.strftime("%Y%m%d").to_s
               %>
            <%= f.cl_image_upload(:image_id, :html => { :multiple => true }, :folder => datetimeNow, :use_filename => true) %>

         </div>
         <span class="status"></span>
      </div>
      </label>
      <div id="info" style="margin-top:10px"></div>
   </div>
</div>
<div class="row">
   <div class="span6">
      <label for="report_location">Location <span class="divrojo">*</span></label>
      <%= f.text_field :location, :class => 'required fieldufo' %>
      <div id="map-canvas" class="map-canvas"></div>
   </div>
   <div class="span6">
      <label for="report_description">Description <span class="divrojo">*</span></label>
      <%= f.text_area :description, :rows => 8, :cols => 84, :class => 'required fieldufo textarea100' %>
   </div>
</div>
<div class="row">
   <div class="span6">
      <%= show_simple_captcha(:label => "")%>
      <div class="caja-text"><span class="divrojo"><%=@notice%></span></div>
   </div>
   <div class="span6">
      <input type="submit" class="submit-button" value="SEND UFO'S REPORT" name="commit" style="margin: 20px;">
   </div>
   <div name="coord_div" id="coord_div" class="required" style="visibility: hidden;"></div>
   <input type="hidden" size="30" name="report[coord]" id="report_coord" class="fieldufo">
</div>
<% end %>
<script>
  $(document).ready(function() {
    // Cloudinary jQuery integration library uses jQuery File Upload widget
    // (see http://blueimp.github.io/jQuery-File-Upload/).
    // Any file input field with cloudinary-fileupload class is automatically
    // wrapped using the File Upload widget and configured for Cloudinary uploads.
    // You can further customize the configuration using .fileupload method
    // as we do below.
    $(".cloudinary-fileupload")
      .fileupload({
        // Uncomment the following lines to enable client side image resizing and valiation.
        // Make sure cloudinary/processing is included the js file
        //disableImageResize: false,
        //imageMaxWidth: 800,
        //imageMaxHeight: 600,
        //acceptFileTypes: /(\.|\/)(gif|jpe?g|png|bmp|ico)$/i,
        //maxFileSize: 20000000, // 20MB
        dropZone: "#direct_upload",
        start: function (e) {
          $(".status").text("Starting upload...");
        },
        progress: function (e, data) {
          $(".status").text("Uploading... " + Math.round((data.loaded * 100.0) / data.total) + "%");
        },
        fail: function (e, data) {
          $(".status").text("Upload failed");
        }
      })
      .off("cloudinarydone").on("cloudinarydone", function (e, data) {
        $("#photo_bytes").val(data.result.bytes);
        $(".status").text("");
        $(".preview").html(
          $.cloudinary.image(data.result.public_id, {
            format: data.result.format, width: 50, height: 50, crop: "fit"
          })
        );
        view_upload_details(data.result);
      });
    });
    var cont = 0;
    function view_upload_details(upload) {
        //var img = "";
        var img = document.createElement("input");
        var img_hidden = document.createElement("input");
        $.each(upload, function(k,v){
          if(k=="url"){
                //img = $('<img />',{ src: JSON.stringify(v)}).appendTo($('#YourDiv'));
                img.type = "image";
                img.src = v;
                img.width = "100";
                img.style = "height:100px"
                img.name = "report[image]"
                img_hidden.type = "hidden";
                img_hidden.id = "report_image_cloudinary"
                img_hidden.value = v;
                img_hidden.name = "report[image_cloudinary[" + cont + "]]"
          }
        });
        $("#info").append(
          $(img)
        );
        $("#info").append(
          $(img_hidden)
        );
        cont = cont + 1;
      }
</script>
<script>
	mapboxgl.accessToken = 'pk.eyJ1IjoiZmpmZGVwZWRybyIsImEiOiJjam40bWswc3k1ZmgwM3BueG45YXZoZ3MwIn0.LpHFrAER3JjOAZwnyDnrqw';
	var map = new mapboxgl.Map({
	    container: 'map-canvas',
	    style: 'mapbox://styles/fjfdepedro/cjnc849ms0g6l2rsc5edfb4gl',
	    center: [-73.98,40.76],
	    zoom: 7
	});

	var geocoder = new MapboxGeocoder({
	    accessToken: mapboxgl.accessToken
	});

	map.addControl(geocoder);

	// After the map style has loaded on the page, add a source layer and default
	// styling for a single point.
	map.on('load', function() {
	    map.addSource('single-point', {
	        "type": "geojson",
	        "data": {
	            "type": "FeatureCollection",
	            "features": []
	        }
	    });


	    map.addLayer({
	        "id": "point",
	        "source": "single-point",
	        "type": "circle",
	        "paint": {
	            "circle-radius": 10,
	            "circle-color": "#ff0000"
	        }
	    });

      // Listen for the `geocoder.input` event that is triggered when a user
    // makes a selection and add a symbol that matches the result.
    geocoder.on('result', function(ev) {
        map.getSource('single-point').setData(ev.result.geometry);
        var styleSpec = ev.result;
        var styleSpecBox = document.getElementById('coord_div');
        var styleSpecText = JSON.stringify(styleSpec, null, 2);
        var syntaxStyleSpecText = syntaxHighlight(styleSpecText);
        styleSpecBox.innerHTML = syntaxStyleSpecText;

        document.getElementById('report_coord').value = syntaxStyleSpecText;

    });

      
	});

  function syntaxHighlight(json) {
    var obj = JSON.parse(json);
    return obj.center
  }
</script>